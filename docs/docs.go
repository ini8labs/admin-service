// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
		"schemes": ["http","https"],
		"swagger": "2.0",
		"info": {
			"description": "{{escape .Description}}",
			"title": "{{.Title}}",
			"contact": {},
			"version": "{{.Version}}"
		},
		"paths": {
			"/events":{
				"get":{
					"summary": "Get info of all events",
					"tags": ["Events"],
					"responses": {
						"200":{
							"description": "OK",
						"schema": {
							"type":"object",
							"example":
							  {
								"user_id": "6443a1e99c150ed9e52c5bdd",
								"name": "Anand",
								"phone": 7506639417,
								"gov_id": "ABCDEFG",
								"e_mail": "anand@ini8labs.tech"
							  }
						}
					}
				}
			}
			},
			"/users":{
				"get":{
					"summary":"Get participants info by event id",
					"tags":["User"],
					"description":"Get user info by event Id",
					"consumes": [
					  "application/json"
					],
					"produces": [
					  "application/json"
					],
					"parameters": [
						{
							"description": "Get user info by event id",
							"name": "eventId",
							"in": "query",
							"type": "string",
							"required": true
						}
					],
					"responses":{
						"200": {
						"description": "OK",
						"schema": {
							"type":"array",
							"example":[
								{
									"event_id": "6443ce519e3f8c9e2af517fb",
									"event_date": {},
									"username": "Randolph2",
									"betid": "6447d115dd1461c143840312",
									"user_id": "644790a68e3540cbb44180b0",
									"bet_numbers": [
										1,
										2,
										3,
										4
									],
									"amount": 12,
									"phone": 1234543435
								}
							]
						}
					  },
					  "400":{
						"description": "The server did not understand the request.",
						"schema": {
						  "type":"string",
						  "example":"Invalid ID"
						}
					  },
					  "404":{
						"description": "The server cannot find the requested page.",
						"schema": {
						  "type":"string",
						  "example":"User Not Found"
						}
					  },
					  "500":{
						"description": "The server can not find the requested page.",
						"schema": {
						  "type":"string",
						  "example":"Internal Server Error"
							}
						}
					}
				}
			},
			"/event":{
				"post":{
					"summary":"Add a new event",
					"tags":["Events"],
					"parameters":[
						{
							"name":"info",
							"in":"body",
							"schema":{
								"type":"object",
								"properties":{
									"event_date":{
										"type":"object",
										"properties": {
											"day":{
												"type":"integer",
												"example": 8
											},
											"month":{
												"type":"integer",
												"example": 5
											},
											"year":{
												"type":"integer",
												"example": 2023
											}
										}
									},
									"name":{
										"type":"string",
										"example":"Monday Special"
									},
									"event_type":{
										"type":"string",
										"example":"MS"
									},
									"win_number":{
										"type":"array",
										"example":[12,29,62,55,89]
									}
								}
							}
						}
					],
					"responses":{
						"201": {
							"description": "ok",
							"schema": {
								"type": "string",
						"example": "event info added successfully"
							}
						}
					}
			},
				"get":{
					"summary":"Get event info by event type, date or date range",
					"tags": ["Events"],
					"description": "Get Event Info",
					"consumes": [
					  "application/json"
					],
					"produces": [
					  "application/json"
					],
					"parameters":[
					  {
						"description": "Get event info by event type",
						"name": "eventType",
						"in": "query",
						"type": "string",
						"required": false
						},
						{
						"description": "Get event info by date",
						"name": "date",
						"in": "query",
						"type": "string",
						"required": false,
						"schema": {
							"type": "string",
							"format": "date",
							"example": "yyyy-mm-dd"
						  }
						},
						{
							"name": "startDate",
							"in": "query",
							"description": "Start date",
							"schema": {
							  "type": "string",
							  "format": "date",
							  "example": "yyyy-mm-dd"
							}
						  },
						  {
							"name": "endDate",
							"in": "query",
							"description": "End date",
							"schema": {
							  "type": "string",
							  "format": "date",
							  "example": "yyyy-mm-dd"
							}
						  }
					],
					"responses": {
					  "200": {
						"description": "OK",
						"schema": {
							"type":"object",
							"example":
							  {
								"user_id": "6443a1e99c150ed9e52c5bdd",
								"name": "Anand",
								"phone": 7506639417,
								"gov_id": "ABCDEFG",
								"e_mail": "anand@ini8labs.tech"
							  }
							
						}
					  },
					  "400":{
						"description": "The server did not understand the request.",
						"schema": {
						  "type":"string",
						  "example":"Bad Format"
						}
					  },
					  "404":{
						"description": "The server cannot find the requested page.",
						"schema": {
						  "type":"string",
						  "example":"Page Not Found"
						}
					  },
					  "500":{
						"description": "The server can not find the requested page.",
						"schema": {
						  "type":"string",
						  "example":"Internal Server Error"
								}
							  }	
						}
					}
			},
			"/event/{EventUID}":{
				"delete": {
					"summary":"Delete an event by event Id",
					"tags": ["Events"],
					"parameters": [
						{
							"description": "enter a valid event id",
							"name": "EventUID",
							"in": "path",
							"required": true,
							"type": "string"
						}
					],
					"responses": {
						"204":{
							"description": "Event deleted successfully",
							"schema": {
								"type": "string",
								"example": "Event deleted successfully"
							}
						}
					}
				}
			},
			"/user":{
			  "get":{
				"summary":"Get user info by phone number, User Id or govt Id",
				"tags": ["User"],
				"description": "Get User Info",
				"consumes": [
				  "application/json"
				],
				"produces": [
				  "application/json"
				],
				"parameters":[
				  {
					"description": "Get user info by phone number",
					"name": "phone",
					"in": "query",
					"type": "string",
					"required": false
							},
							{
					"description": "Get user info by uid",
					"name": "uid",
					"in": "query",
					"type": "string",
					"required": false
							},
				  {
					"description": "Get user info by govt id",
					"name": "govid",
					"in": "query",
					"type": "string",
					"required": false
							}
				],
				"responses": {
				  "200": {
					"description": "OK",
					"schema": {
						"type":"object",
						"example":
						  {
							"user_id": "6443a1e99c150ed9e52c5bdd",
							"name": "Anand",
							"phone": 7506639417,
							"gov_id": "ABCDEFG",
							"e_mail": "anand@ini8labs.tech"
						  }
						
					}
				  },
				  "400":{
					"description": "The server did not understand the request.",
					"schema": {
					  "type":"string",
					  "example":"Bad Format"
					}
				  },
				  "500":{
					"description": "The server can not find the requested page.",
					"schema": {
					  "type":"string",
					  "example":"Internal Server Error"
						}
					}
				}
			}
		}
	}
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Admin Service API's",
	Description:      "Lottery Project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}